{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.services.lumd;
in {
  options.services.lumd = {
    enable = mkEnableOption "Automatic ambient light-based brightness adjustment";

    package = mkOption {
      type = types.package;
      # No default, must be provided by the user or the flake
      description = "The lumd package to use.";
    };

    users = mkOption {
      type = types.listOf types.str;
      default = [];
      description = "List of users to enable lumd for.";
      example = [ "alice" "bob" ];
    };

    globalConfig = {
      minBrightness = mkOption {
        type = types.int;
        default = 40;
        description = "Minimum brightness level (0-100).";
      };

      brightnessOffset = mkOption {
        type = types.int;
        default = 40;
        description = "Brightness offset to apply to ambient light readings.";
      };

      sampleIntervalSecs = mkOption {
        type = types.int;
        default = 3;
        description = "Interval in seconds between ambient light samples.";
      };

      transitionSteps = mkOption {
        type = types.int;
        default = 10;
        description = "Number of steps for smooth brightness transitions.";
      };

      stepDelayMs = mkOption {
        type = types.int;
        default = 10;
        description = "Delay in milliseconds between transition steps.";
      };

      brightnessThreshold = mkOption {
        type = types.int;
        default = 8;
        description = "Threshold for brightness changes to trigger a transition.";
      };

      manualAdjustmentAmount = mkOption {
        type = types.int;
        default = 8;
        description = "Amount to adjust brightness when using manual controls.";
      };
    };
  };

  config = mkIf cfg.enable {
    environment.systemPackages = [ cfg.package ];

    # Set up configuration for each user
    system.activationScripts.lumd-setup = 
      let
        configFile = pkgs.writeText "lumd-config.toml" ''
          # Lumd configuration - Generated by NixOS
          
          # Backlight settings
          min_brightness = ${toString cfg.globalConfig.minBrightness}
          brightness_offset = ${toString cfg.globalConfig.brightnessOffset}
          
          # Sampling settings
          sample_interval_secs = ${toString cfg.globalConfig.sampleIntervalSecs}
          transition_steps = ${toString cfg.globalConfig.transitionSteps}
          step_delay_ms = ${toString cfg.globalConfig.stepDelayMs}
          
          # Interpolation threshold
          brightness_threshold = ${toString cfg.globalConfig.brightnessThreshold}
          
          # Adjustment amount for manual controls
          manual_adjustment_amount = ${toString cfg.globalConfig.manualAdjustmentAmount}
        '';
      in
      stringAfter [ "users" ] (concatMapStrings 
        (user: ''
          # Create config directory for ${user}
          mkdir -p /home/${user}/.config/lumd
          cp ${configFile} /home/${user}/.config/lumd/config.toml
          chown -R ${user}:users /home/${user}/.config/lumd
        '') 
        cfg.users
      );

    # Enable lumd systemd user service for specified users
    systemd.packages = [ cfg.package ];

    # Allow users to access backlight and illuminance devices
    services.udev.extraRules = ''
      # Give users access to backlight and sensor devices
      SUBSYSTEM=="backlight", ACTION=="add", RUN+="${pkgs.coreutils}/bin/chmod a+w /sys/class/backlight/%k/brightness"
      SUBSYSTEM=="iio", ACTION=="add", RUN+="${pkgs.coreutils}/bin/chmod -R a+r /sys/bus/iio/devices/"
    '';
  };
}